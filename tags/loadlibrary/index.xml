<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>loadlibrary on RSI</title>
    <link>https://www.rsiproject.org/blog/tags/loadlibrary/</link>
    <description>Recent content in loadlibrary on RSI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Thu, 28 Dec 2023 09:03:20 -0800</lastBuildDate>
    <atom:link href="https://www.rsiproject.org/blog/tags/loadlibrary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Native DLL Injection Using LoadLibrary - Parte 04</title>
      <link>https://www.rsiproject.org/blog/posts/parte-04-native-dll-injection-using-loadlibrary/</link>
      <pubDate>Thu, 28 Dec 2023 09:03:20 -0800</pubDate>
      <guid>https://www.rsiproject.org/blog/posts/parte-04-native-dll-injection-using-loadlibrary/</guid>
      <description>Por Davi Chaves&#xA;O processo de injeção nativa de uma dll em um processo é bastante semelhante ao método convencional utilizando as funções da kernel32.dll. A lógica é exatamente igual:&#xA;NTSTATUS NtProcessStartup(PPEB peb) { // Abre o processo alvo NtOpenProcess(...); // Alocamos um pouco de memória no processo alvo NtAllocateVirtualMemory(...); // Escrevemos o nome da nossa dll na memória do processo alvo NtWriteVirtualMemory(...); // Pegamos o endereço da função LoadLibraryW LdrGetProcedureAddress(&amp;#34;LoadLibraryW&amp;#34;.</description>
    </item>
  </channel>
</rss>
